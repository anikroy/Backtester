import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.StringTokenizer;

import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.OHLCDataset;

public class Draw{  
	
	public Draw(){
		super();
	}
	
    public Component Price_Chart(){
		ArrayList dataItems = new ArrayList();
		        
		try	{
			String strUrl="http://ichart.yahoo.com/table.csv?s=MSFT&a=3&b=1&c=2013&d=3&e=15&f=2050&g=d";
			BufferedReader in=new BufferedReader(new InputStreamReader((new URL(strUrl)).openStream()));
			DateFormat df=new SimpleDateFormat("y-M-d");
			String inputLine;
			in.readLine();
		    
		    while((inputLine=in.readLine())!=null) {
		        StringTokenizer st = new StringTokenizer(inputLine, ",");
		        Date date=df.parse(st.nextToken());
		        
		        double open = Double.parseDouble(st.nextToken()),
		               high = Double.parseDouble(st.nextToken()),
		               low = Double.parseDouble(st.nextToken()),
		               close = Double.parseDouble(st.nextToken()),
		               volume = Double.parseDouble(st.nextToken()),
		               adjClose = Double.parseDouble(st.nextToken());
		
		        open = open * adjClose / close;
		        high = high * adjClose / close;
		        low = low * adjClose / close;
		        
		        OHLCDataItem item = new OHLCDataItem(date, open, high, low, adjClose, volume);
		        dataItems.add(item);
		    } in.close();
		} catch (Exception e) {
		    e.printStackTrace();
		}
		
		Collections.reverse(dataItems);
		OHLCDataItem[] data = (OHLCDataItem[]) dataItems.toArray(new OHLCDataItem[dataItems.size()]);
		OHLCDataset dataset = new DefaultOHLCDataset("MSFT", data);
		
		JFreeChart chart=ChartFactory.createCandlestickChart("MSFT", "Time", "Price", dataset, false);
		chart.setBackgroundPaint(Color.black);
		chart.setBorderPaint(Color.green);
		chart.setBorderVisible(true);
		XYPlot plot=(XYPlot)chart.getPlot();
		
		plot.setBackgroundPaint(Color.black);
		plot.setDomainGridlinesVisible(true);
		plot.setDomainGridlinePaint(Color.CYAN);
		plot.setRangeGridlinePaint(Color.CYAN);
		
		((NumberAxis)plot.getRangeAxis()).setAutoRangeIncludesZero(false);
		((DateAxis)plot.getDomainAxis()).setTimeline(SegmentedTimeline.newMondayThroughFridayTimeline());
		((CandlestickRenderer)plot.getRenderer()).setDrawVolume(true);
		
		JPanel Candle=new JPanel();
		Candle.setLayout(new GridLayout(4,4));
		Candle.add(new ChartPanel(chart), BorderLayout.CENTER);
		//Candle.setSize(new Dimension(4,1));
		
		return (Candle);
    }
    
}